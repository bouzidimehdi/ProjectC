// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ProjectC_webshop.Migrations
{
    [DbContext(typeof(WebshopContext))]
    [Migration("20180927075009_Add tables Builder_Product and Builder")]
    partial class AddtablesBuilder_ProductandBuilder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Model.Builder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Logo");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Builder");
                });

            modelBuilder.Entity("Model.Builder_Product", b =>
                {
                    b.Property<int>("Builder_ID");

                    b.Property<int>("Product_ID");

                    b.HasKey("Builder_ID", "Product_ID");

                    b.HasIndex("Product_ID");

                    b.ToTable("Builder_Product");
                });

            modelBuilder.Entity("Model.Key", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("License");

                    b.Property<int>("ProductID");

                    b.Property<bool>("Sold");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("Key");
                });

            modelBuilder.Entity("Model.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<float>("Price");

                    b.HasKey("ID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Model.Role", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("User_role");

                    b.HasKey("UserId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Model.User_wishlist", b =>
                {
                    b.Property<int>("User_ID");

                    b.Property<int>("Product_ID");

                    b.HasKey("User_ID", "Product_ID");

                    b.HasIndex("Product_ID");

                    b.ToTable("User_wishlist");
                });

            modelBuilder.Entity("Model.Users", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Building_nummer");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Date_of_birth");

                    b.Property<string>("E_mail");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Salt");

                    b.Property<string>("Street");

                    b.Property<string>("Surname");

                    b.Property<string>("Zip_code");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Model.Builder_Product", b =>
                {
                    b.HasOne("Model.Builder", "Builder")
                        .WithMany("BuilderProducts")
                        .HasForeignKey("Product_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Product", "Product")
                        .WithMany("BuilderProducts")
                        .HasForeignKey("Product_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Key", b =>
                {
                    b.HasOne("Model.Product", "Products")
                        .WithMany("Keys")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Role", b =>
                {
                    b.HasOne("Model.Users", "User")
                        .WithOne("Roles")
                        .HasForeignKey("Model.Role", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.User_wishlist", b =>
                {
                    b.HasOne("Model.Product", "Product")
                        .WithMany("Wishlists")
                        .HasForeignKey("Product_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Users", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
